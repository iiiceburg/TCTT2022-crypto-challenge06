# Reference https://crypto.stackexchange.com/questions/31109/rsa-encryption-and-decryption-with-multiple-prime-modulus-using-crt
# Resolver for decryption of RSA with multiple prime modulus using CRT
def inverse(x, m):
    a, b, u = 0, m, 1
    while x > 0:
        q = b // x
        x, a, b, u = b % x, u, x, a - q * u
    if b == 1:
        return a % m


n = 8908744952499750087937487240129305605630104507735044605118350107506022140818691078500978841059544465406366240340833924054090188846975544096639905610489529157253866709476893839325357377378161844373340358143667258360114511536212495047802240772702127949393624869832663538053609834189308621145398801569162207
c = 209803190336767040120346378590538295255382960483782713500998772419414196159516841320988075221392992738599444091636416461757793064882675191904561360812554964088629999355171593013367349702624598203800648505112188903641768837091546629665418201446696922348901896105794534869480228209078297898245556405433096
e = 57329

phi = 1
factors = open('primes.txt', 'r')
for p in factors:
    p = int(p)
    phi *= (p - 1)

d = inverse(e, phi)
M = bytes.fromhex(hex(pow(c, d, n))[2:]).decode()
print(M)
